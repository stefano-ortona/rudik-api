/**
 * RuDiK 1.0 Async APIs Collection of APIs for inducing declarative rules with RuDiK and few others utility methods for
 * RDF knowledge graphs accesible via a SPARQL endpoint.
 *
 * OpenAPI spec version: 1.0.0 Contact: stefano.ortona@meltwater.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 */

package asu.edu.rule_miner.api.api;

import org.junit.Assert;
import org.junit.Test;

import asu.edu.api.model.RuleInstantiation;
import asu.edu.api.model.RuleResult;
import asu.edu.api.model.RuleSpecification;
import asu.edu.rule_miner.api.service.ApiException;

/**
 * API tests for RuleApi
 */
public class RuleApiTest {

  private final RuleApi api = new RuleApi();

  /**
   * Horn Rules Instantiation over the Graph
   *
   * Instantiate the given rule over the graph to compute new generated facts in case of positive rules, or potential
   * erroneous triples in case of negative rules.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void instantiateRuleTest() throws ApiException {
    final RuleResult ruleSpecification = new RuleResult();
    final RuleInstantiation response = api.instantiateRule(ruleSpecification);

    Assert.assertNotNull(response);
    System.out.println(response);
  }

  /**
   * Horn Rules Mining
   *
   * Triggers the induction of a set of logical rules for the given knwoledge graph and a target predicate. The call is
   * asynchronous, and the computed rules will be stored and they can be retrieved as soon as the mining is complete.
   *
   * @throws ApiException if the Api call fails
   */
  @Test
  public void mineRuleTest() throws ApiException {
    final RuleSpecification ruleSpecification = null;
    // RuleResult response = api.mineRule(ruleSpecification);

    // TODO: test validations
  }

}
